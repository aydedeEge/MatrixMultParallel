import java.util.concurrent.*;
import java.util.concurrent.locks.*;

public class DeadLockDemo {
	public User1 user1 = new User1();
	public User2 user2 = new User2();
	private static Lock lock1 = new ReentrantLock();
	private static Lock lock2 = new ReentrantLock();

	public static void main(String[] args) {
		user1.start();
		user2.start();
	}
	
	private class User1 extends Thread{
		public void getLock1ThenLock2(){
			lock1.lock();
			
			System.out.println("User2 acquired lock1");
			try{
				Thread.sleep(1000);
			}catch (InterruptedException ex) {
			}
			lock2.lock();
			System.out.println("User1 acquired lock2");
		}
		
		public void run() {
			this.getLock1ThenLock2();
		}
	}
	
	private class User2 extends Thread{
		public void getLock2ThenLock1(){
			lock2.lock();
			
			System.out.println("User2 acquired lock2");
			try{
				Thread.sleep(1000);
			}catch (InterruptedException ex) {
			}
			lock1.lock();
			System.out.println("User2 acquired lock1");
		}
		
		public void run() {
			this.getLock2ThenLock1();
		}
	}
}
