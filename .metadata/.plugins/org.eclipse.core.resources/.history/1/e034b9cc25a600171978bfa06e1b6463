import java.util.concurrent.*;
import java.util.concurrent.locks.*;

public class DeadLockDemo {
	private User1 user1 = new User1();
	private static Lock lock1 = new ReentrantLock();
	private static Lock lock2 = new ReentrantLock();

	public static void main(String[] args) {
		
	}
	
	private static class User1 extends Thread{
		public void getLock1ThenLock2(){
			lock1.lock();
			
			System.out.println("User2 acquired lock1");
			try{
				Thread.sleep(1000);
			}catch (InterruptedException ex) {
			}
			lock2.lock();
			System.out.println("User1 acquired lock2");
		}
		
		public void run() {
			
		}
	}
	
	private static class User2 extends Thread{
		public void getLock2ThenLock2(){
			lock2.lock();
			
			System.out.println("User2 acquired lock2");
			try{
				Thread.sleep(1000);
			}catch (InterruptedException ex) {
			}
			lock1.lock();
			System.out.println("User2 acquired lock1");
		}
		
		public void run() {
			
		}
	}
}
