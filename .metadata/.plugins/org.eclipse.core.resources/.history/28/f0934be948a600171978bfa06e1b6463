import java.util.concurrent.*;
import java.util.concurrent.locks.*;
import java.util.Random;

public class DiningPhilosopher {
	private static Random rand = new Random();
	private static Lock chop1 = new ReentrantLock();
	private static Lock chop2 = new ReentrantLock();
	private static Lock chop3 = new ReentrantLock();
	private static Lock chop4 = new ReentrantLock();
	private static Lock chop5 = new ReentrantLock();
	
	private static void main(String[] args){
		ExecutorService executor = Executors.newCachedThreadPool();
		
		executor.execute(new ThinkandEat(chop1, chop2));
		executor.execute(new ThinkandEat(chop2, chop3));
		executor.execute(new ThinkandEat(chop3, chop4));
		executor.execute(new ThinkandEat(chop4, chop5));
		executor.execute(new ThinkandEat(chop5, chop1));
	}
		
	public static class ThinkandEat implements Runnable{
		private Lock left, right;
		
		public ThinkandEat(Lock left, Lock right){
			this.left = left;
			this.right = right;
		}
		
		public void run(){
			System.out.println("Philo12 is thinking");
			try{
				Thread.sleep(rand.nextInt(2000));
			}catch(InterruptedException ex){}
			
			System.out.println("Philo12 is attempting to eat");
			chop1.lock();
			System.out.println("Philo12 grabbed chop1");
			
			chop2.lock();
			System.out.println("Philo12 grabbed chop2");
			
			try{
				Thread.sleep(rand.nextInt(2000));
			}catch(InterruptedException ex){
			}finally {
				chop1.unlock();
				System.out.println("Philo12 released chop1");
				
				chop2.unlock();
				System.out.println("Philo12 released chop2");
			}
		}
	}
}